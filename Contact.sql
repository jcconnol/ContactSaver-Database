CREATE EXTENSION pgcrypto; --Allows PostgreSQL to understand UUIDs. Only have to create the extension once for a database.

DROP TABLE contact;

CREATE TABLE contact (
  id uuid NOT NULL DEFAULT gen_random_uuid(), --The record ID. Stored in the edu.uark.dataaccess.entities:BaseEntity#id property. See also the named constant defined in edu.uark.dataaccess.entities:BaseFieldNames that is used for Java <-> SQL mappings.
  employeeid character varying(32),  --Stored in the edu.uark.models.entities:ContactEntity#employeeid. 
  phonenumber NUMERIC(10, 0), --Stored in the edu.uark.models.entities:ContactEntity#phonenumber property. See also the named constant defined in edu.uark.models.entities.fieldnames:ProductFieldNames that is used for Java <-> SQL mappings.
  CONSTRAINT contact_pkey PRIMARY KEY (id)
) WITH (
  OIDS=FALSE
);

--DROP INDEX ix_contact_phonenumber;

CREATE INDEX ix_contact_phonenumber --An index on the contact table phonenumber column
  ON contact
  USING btree
  (lower(phonenumber::text) COLLATE pg_catalog."default"); --Index on the lower case of the lookup code. Queries for contract by phonenumber should search using the lower case of the phone number.

INSERT INTO contact (employeeid, phonenumber) VALUES ( --id is generated by default.
       'employeename1'
     , 8675301)
RETURNING id;

INSERT INTO contact (employeeid, phonenumber) VALUES (
       'employeename2'
     , 8675301)
RETURNING id;

INSERT INTO contact (employeeid, phonenumber) VALUES (
       'employeename3'
     , 2548936565)
RETURNING id;

--SELECT * FROM contact;

--DELETE FROM contact;

